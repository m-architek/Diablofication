OUTER_SET EFF_OPCODE_CURE_SLEEP = 2
OUTER_SET EFF_OPCODE_CURE_BERSERK = 4
OUTER_SET EFF_OPCODE_CHARM = 5
OUTER_SET EFF_OPCODE_CHR_MOD = 6
OUTER_SET EFF_OPCODE_COLOUR_BY_PALETTE = 7
OUTER_SET EFF_OPCODE_CON_MOD = 10
OUTER_SET EFF_OPCODE_CURE_POISON = 11
OUTER_SET EFF_OPCODE_HP_DAMAGE = 12
OUTER_SET EFF_OPCODE_INSTANT_DEATH = 13
OUTER_SET EFF_OPCODE_DEX_MOD = 15
OUTER_SET EFF_OPCODE_HP_CURRENT = 17
OUTER_SET EFF_OPCODE_HP_MAXIMUM = 18
OUTER_SET EFF_OPCODE_INT_MOD = 19
OUTER_SET EFF_OPCODE_STAT_MORALE = 23
OUTER_SET EFF_OPCODE_RAISE_DEAD = 32
OUTER_SET EFF_OPCODE_STR_MOD = 44
OUTER_SET EFF_OPCODE_CURE_STUN = 46
OUTER_SET EFF_OPCODE_CURE_INVISIBILITY = 47
OUTER_SET EFF_OPCODE_CURE_SILENCE = 48
OUTER_SET EFF_OPCODE_WIS_MOD = 49
OUTER_SET EFF_OPCODE_KILL_CREATURE = 55
OUTER_SET EFF_OPCODE_DISPEL_MAGIC = 58
OUTER_SET EFF_OPCODE_GRAPHICS_COLOR_FADE = 61
OUTER_SET EFF_OPCODE_CURE_BLINDENESS = 75
OUTER_SET EFF_OPCODE_CURE_FEEBLEMINDEDNESS = 77
OUTER_SET EFF_OPCODE_CURE_DISEASE = 79
OUTER_SET EFF_OPCODE_CURE_DEAFNESS = 81
OUTER_SET EFF_OPCODE_FATIGUE_MODIFIER = 93
OUTER_SET EFF_OPCODE_PROTECTION_FROM_OPCODE = 101
OUTER_SET EFF_OPCODE_STATE_PARALYZE = 109
OUTER_SET EFF_OPCODE_STATE_PETRIFICATION = 134
OUTER_SET EFF_OPCODE_POLYMORPH = 135
OUTER_SET EFF_OPCODE_DISPLAY_STRING = 139
OUTER_SET EFF_OPCODE_DISPLAY_ICON = 142
OUTER_SET EFF_OPCODE_CAST_SPELL = 146
OUTER_SET EFF_OPCODE_SUMMON_REPLACE_CREATURE = 151
OUTER_SET EFF_OPCODE_CURE_HORROR = 161
OUTER_SET EFF_OPCODE_CURE_HOLD = 162
OUTER_SET EFF_OPCODE_CURE_DRUNKENESS = 164
OUTER_SET EFF_OPCODE_PLAY_SOUND = 174
OUTER_SET EFF_OPCODE_USE_EFF_FILE = 177
OUTER_SET EFF_OPCODE_PROTECTION_FROM_SPELL = 206
OUTER_SET EFF_OPCODE_HP_MINIMUM = 208
OUTER_SET EFF_OPCODE_KILL_60HP = 209
OUTER_SET EFF_OPCODE_IMPRISONMENT = 211
OUTER_SET EFF_OPCODE_FREEDOM = 212
OUTER_SET EFF_OPCODE_MAZE = 213
OUTER_SET EFF_OPCODE_GRPAHICS_PLAY_EFFECT = 215
OUTER_SET EFF_OPCODE_LEVEL_DRAIN = 216
OUTER_SET EFF_OPCODE_CURE_LEVEL_DRAIN = 224
OUTER_SET EFF_OPCODE_DISINTEGRATE = 238
OUTER_SET EFF_OPCODE_REMOVE_ICON = 240
OUTER_SET EFF_OPCODE_ALTERNATIVE_CHARM = 241
OUTER_SET EFF_OPCODE_CURE_CONFUSION = 242
OUTER_SET EFF_OPCODE_CURE_PAUSE = 270
OUTER_SET EFF_OPCODE_ENABLE_BUTTON = 279
OUTER_SET EFF_OPCODE_GRAPHICS_REMOVE_SELECTION_CIRCLE = 287
OUTER_SET EFF_OPCODE_GRAPHICS_DISABLE_PERMANENT_DEATH = 295
OUTER_SET EFF_OPCODE_SCRIPT_MODIFY_LOCAL_VAR = 309
OUTER_SET EFF_OPCODE_SPELL_MAGICAL_REST = 316
OUTER_SET EFF_OPCODE_PROTECTION_FROM_RESOURCE = 318
OUTER_SET EFF_OPCODE_REMOVE_EFFECTS_BY_RESOURCE = 321
OUTER_SET EFF_OPCODE_PROTECTION_FROM_RESOURCE_AND_MESSAGE = 324
OUTER_SET EFF_OPCODE_APPLY_EFFECTS_LIST = 326
OUTER_SET EFF_OPCODE_SET_STATE = 328
OUTER_SET EFF_OPCODE_REMOVE_OPCODE = 337
OUTER_SET EFF_OPCODE_MINIMUM_BASE_STATS = 367

OUTER_SET EFF_TARGET_SELF = 1
OUTER_SET EFF_TARGET_PRESET = 2

OUTER_SET EFF_TIMING_INSTANT_LIMITED = 0
OUTER_SET EFF_TIMING_INSTANT_PERMANENT_UNTIL_DEATH = 1
OUTER_SET EFF_TIMING_INSTANT_WHILE_EQUIPPED = 2
OUTER_SET EFF_TIMING_DELAY_LIMITED = 3
OUTER_SET EFF_TIMING_DELAY_PERMANENT_UNTIL_DEATH = 4
OUTER_SET EFF_TIMING_DELAY_WHILE_EQUIPPED = 5
OUTER_SET EFF_TIMING_DELAY_LIMITED_IN_TICKS = 6
OUTER_SET EFF_TIMING_DELAY_PERMANENT_UNTIL_DEATH_IN_TICKS = 7
OUTER_SET EFF_TIMING_DELAY_WHILE_EQUIPPED_IN_TICKS = 8
OUTER_SET EFF_TIMING_INSTANT_PERMANENT = 9
OUTER_SET EFF_TIMING_INSTANT_LIMITED_IN_TICKS  = 10

OUTER_SET EFF_NATURAL_NONMAGICAL = 0
OUTER_SET EFF_DISPELLABLE_BLOCKABLE = 1
OUTER_SET EFF_UNDISPELLABLE_UNBLOCKABLE = 2
OUTER_SET EFF_DISPELLABLE_UNBLOCKABLE = 3


DEFINE_PATCH_FUNCTION PATCH_EFF_EFFECT_LIST
    INT_VAR offset_shift = ~~ 
        effects_count = ~~
    STR_VAR patches_ref = 0
        eff_strategy_ref = 0
        effect_category = 0
    RET effects_count_diff
BEGIN 
    SET effects_count_diff = 0
    SET effect_size = $~%eff_strategy_ref%~(size)

    FOR (effect_index = 0; effect_index < effects_count; ++effect_index) BEGIN
        SET effect_offset = offset_shift + (effect_index * effect_size)

        LPF PATCH_EFF_EFFECT INT_VAR offset_shift = effect_offset
            STR_VAR patches_ref eff_strategy_ref effect_category
            RET patch_effects_count_diff = effects_count_diff
            END

        SET effect_index = effect_index + patch_effects_count_diff
        SET effects_count = effects_count + patch_effects_count_diff
        SET effects_count_diff = effects_count_diff + patch_effects_count_diff
    END
END

DEFINE_PATCH_FUNCTION PATCH_EFF_EFFECT
    INT_VAR offset_shift = ~~
    STR_VAR patches_ref = 0
        eff_strategy_ref = 0
        effect_category = 0
    RET effects_count_diff
    RET_ARRAY created_eff_resources
BEGIN    
    CLEAR_ARRAY created_eff_resources

    LPF PATCH_EFF_EFFECT_FILTER_APPLICABLE_PATCHES INT_VAR offset_shift
        STR_VAR patches_ref eff_strategy_ref effect_category
        RET_ARRAY applicable_patches
        END

    SET effects_count_diff = 0
    PHP_EACH applicable_patches AS patch_name => patch_ref BEGIN
        LPF PATCH_EFF_EFFECT_APPLY_PATCH INT_VAR offset_shift effects_count_diff
            STR_VAR patch_name patch_ref eff_strategy_ref created_eff_resources_ref = created_eff_resources
            RET patch_effects_count_diff = effects_count_diff
            RET_ARRAY created_eff_resources
            END

        SET offset_shift = offset_shift + (patch_effects_count_diff * $~%eff_strategy_ref%~(size))
        SET effects_count_diff = effects_count_diff + patch_effects_count_diff
    END
END

DEFINE_PATCH_FUNCTION PATCH_EFF_EFFECT_FILTER_APPLICABLE_PATCHES
    INT_VAR offset_shift = ~~
    STR_VAR patches_ref = 0 eff_strategy_ref = 0 effect_category = 0
    RET_ARRAY applicable_patches
BEGIN
    SPRINT eff_read_strategy_ref $~%eff_strategy_ref%~(read_strategy) 
    
    CLEAR_ARRAY effect
    CLEAR_ARRAY applicable_patches

    PHP_EACH ~%patches_ref%~ AS patch_name => patch_ref BEGIN

        PATCH_IF (
            NOT VARIABLE_IS_SET $effect(opcode) AND
            VARIABLE_IS_SET $~%patch_ref%~(match_opcode)
        ) BEGIN
            SPRINT read_opcode_fn $~%eff_read_strategy_ref%~(opcode)
            LPF ~%read_opcode_fn%~ INT_VAR offset_shift RET $effect(opcode) = opcode END
        END

        PATCH_IF (
            NOT VARIABLE_IS_SET $effect(resource) AND
            VARIABLE_IS_SET $~%patch_ref%~(match_resource)
        ) BEGIN
            SPRINT read_resource_fn $~%eff_read_strategy_ref%~(resource)
            LPF ~%read_resource_fn%~ INT_VAR offset_shift RET $effect(resource) = resource END
        END

        PATCH_IF (
            (NOT VARIABLE_IS_SET $~%patch_ref%~(match_opcode) OR $effect(opcode) == $~%patch_ref%~(match_opcode)) AND
            (NOT VARIABLE_IS_SET $~%patch_ref%~(match_resource) OR $effect(resource) STR_EQ $~%patch_ref%~(match_resource))
        ) BEGIN

            PATCH_IF (
                NOT VARIABLE_IS_SET $effect(parameter1) AND
                VARIABLE_IS_SET $~%patch_ref%~(match_parameter1)
            ) BEGIN
                SPRINT read_parameter1_fn $~%eff_read_strategy_ref%~(parameter1) 
                LPF ~%read_parameter1_fn%~ INT_VAR offset_shift RET $effect(parameter1) = parameter1 END
            END
            PATCH_IF (
                NOT VARIABLE_IS_SET $effect(parameter2) AND
                VARIABLE_IS_SET $~%patch_ref%~(match_parameter2)
            ) BEGIN
                SPRINT read_parameter2_fn $~%eff_read_strategy_ref%~(parameter2)
                LPF ~%read_parameter2_fn%~ INT_VAR offset_shift RET $effect(parameter2) = parameter2 END
            END

            PATCH_IF (
                (NOT VARIABLE_IS_SET $~%patch_ref%~(exclude_category) OR NOT ~%effect_category%~ STR_EQ $~%patch_ref%~(exclude_category)) AND
                (NOT VARIABLE_IS_SET $~%patch_ref%~(match_parameter1) OR $effect(parameter1) == $~%patch_ref%~(match_parameter1)) AND
                (NOT VARIABLE_IS_SET $~%patch_ref%~(match_parameter2) OR $effect(parameter2) == $~%patch_ref%~(match_parameter2))
            ) BEGIN

                PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(match_function)) BEGIN
                    SPRINT match_function $~%patch_ref%~(match_function)
                    LPF ~%match_function%~ INT_VAR offset_shift STR_VAR eff_read_strategy_ref RET match_result END
                END

                PATCH_IF (NOT VARIABLE_IS_SET $~%patch_ref%~(match_function) OR match_result) BEGIN
                    SPRINT $applicable_patches(~%patch_name%~) ~%patch_ref%~
                END
            END
        END
    END
END

DEFINE_PATCH_FUNCTION PATCH_EFF_EFFECT_APPLY_PATCH
    INT_VAR offset_shift = ~~ effects_count_diff = 0
    STR_VAR patch_name = 0 patch_ref = 0 eff_strategy_ref = 0 created_eff_resources_ref = 0
    RET effects_count_diff
    RET_ARRAY ~%created_eff_resources_ref%~
BEGIN 
    PATCH_PRINT ~Patching %SOURCE_EXT% %SOURCE_RES% (%patch_name%)~

    PATCH_MATCH $~%patch_ref%~(patch_type) WITH
        ~CLONE~ BEGIN
            LPF PATCH_EFF_EFFECT_APPLY_PATCH_CLONE INT_VAR offset_shift
                STR_VAR patch_name patch_ref eff_strategy_ref created_eff_resources_ref
                RET effects_count_diff
                RET_ARRAY ~%created_eff_resources_ref%~
                END
        END
        ~ALTER~ BEGIN 
            LPF PATCH_EFF_EFFECT_APPLY_PATCH_ALTER INT_VAR offset_shift
                STR_VAR patch_name patch_ref eff_strategy_ref
                END

            SET effects_count_diff = 0
        END
        DEFAULT PATCH_FAIL ~Patch type of patch %patch_name% invalid or not defined.~
    END
END

DEFINE_PATCH_FUNCTION PATCH_EFF_EFFECT_APPLY_PATCH_CLONE
    INT_VAR offset_shift = ~~
    STR_VAR patch_name = 0 patch_ref = 0 eff_strategy_ref = 0 created_eff_resources_ref = 0
    RET effects_count_diff
    RET_ARRAY ~%created_eff_resources_ref%~
BEGIN     
    PATCH_MATCH ~%SOURCE_EXT%~ WITH
        ~EFF~ BEGIN
            INNER_ACTION BEGIN
                ACTION_IF (NOT VARIABLE_IS_SET RESREF_PREFIX) BEGIN FAIL ~Action variable RESREF_PREFIX need to be defined.~ END

                LAF GET_UNIQUE_FILE_NAME STR_VAR extension = ~%SOURCE_EXT%~ 
                        base = ~%RESREF_PREFIX%#%patch_name%_EFF_CLONE#%SOURCE_RES%~
                    RET filename
                    END
                
                LOG ~Clone %SOURCE_EXT% %SOURCE_RES% as %filename%.%SOURCE_EXT% (%patch_name%)~ 

                COPY_EXISTING ~%SOURCE_RES%.%SOURCE_EXT%~ ~override/%filename%.%SOURCE_EXT%~
                    LPF PATCH_EFF_EFFECT_APPLY_PATCH_ALTER INT_VAR offset_shift = 0
                        STR_VAR patch_name patch_ref eff_strategy_ref
                        END
            END

            SPRINT $~%created_eff_resources_ref%~(~%SOURCE_RES%~ ~%filename%~) ~%patch_name%~
            SET effects_count_diff = 0
        END
        DEFAULT
            SET eff_size = $~%eff_strategy_ref%~(size)

            READ_ASCII offset_shift effect_content (eff_size)
            INSERT_BYTES offset_shift eff_size
            WRITE_ASCII offset_shift ~%effect_content%~

            LPF PATCH_EFF_EFFECT_APPLY_PATCH_ALTER INT_VAR offset_shift
                STR_VAR patch_name patch_ref eff_strategy_ref
                END

            SET effects_count_diff = 1
    END
END

DEFINE_PATCH_FUNCTION PATCH_EFF_EFFECT_APPLY_PATCH_ALTER
    INT_VAR offset_shift = ~~
    STR_VAR patch_name = 0 patch_ref = 0 eff_strategy_ref = 0
BEGIN            
    SPRINT eff_write_strategy_ref $~%eff_strategy_ref%~(write_strategy) 

    PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(patch_function)) BEGIN
        SPRINT patch_function $~%patch_ref%~(patch_function)
        LPF ~%patch_function%~ INT_VAR offset_shift STR_VAR eff_strategy_ref END
    END

    PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(opcode)) BEGIN
        SPRINT write_opcode_fn $~%eff_write_strategy_ref%~(opcode)
        LPF ~%write_opcode_fn%~ INT_VAR offset_shift opcode = $~%patch_ref%~(opcode) END
    END
    
    PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(parameter1)) BEGIN
        SPRINT write_parameter1 $~%eff_write_strategy_ref%~(parameter1)
        LPF ~%write_parameter1%~ INT_VAR offset_shift parameter1 = $~%patch_ref%~(parameter1) END
    END
    
    PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(parameter2)) BEGIN
        SPRINT write_parameter2_fn $~%eff_write_strategy_ref%~(parameter2)
        LPF ~%write_parameter2_fn%~ INT_VAR offset_shift parameter2 = $~%patch_ref%~(parameter2) END
    END
    
    PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(timing_mode)) BEGIN
        SPRINT write_timing_mode_fn $~%eff_write_strategy_ref%~(timing_mode)
        LPF ~%write_timing_mode_fn%~ INT_VAR offset_shift timing_mode = $~%patch_ref%~(timing_mode) END
    END
    
    PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(dispel_resistance)) BEGIN
        SPRINT write_dispel_resistance_fn $~%eff_write_strategy_ref%~(dispel_resistance)
        LPF ~%write_dispel_resistance_fn%~ INT_VAR offset_shift dispel_resistance = $~%patch_ref%~(dispel_resistance) END
    END
    
    PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(duration)) BEGIN
        SPRINT write_duration_fn $~%eff_write_strategy_ref%~(duration)
        LPF ~%write_duration_fn%~ INT_VAR offset_shift duration = $~%patch_ref%~(duration) END
    END

    PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(max_level)) BEGIN
        SPRINT write_max_level_fn $~%eff_write_strategy_ref%~(max_level)
        LPF ~%write_max_level_fn%~ INT_VAR offset_shift max_level = $~%patch_ref%~(max_level) END
    END
    
    PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(min_level)) BEGIN
        SPRINT write_min_level_fn $~%eff_write_strategy_ref%~(min_level)
        LPF ~%write_min_level_fn%~ INT_VAR offset_shift min_level = $~%patch_ref%~(min_level) END
    END
    
    PATCH_IF (VARIABLE_IS_SET $~%patch_ref%~(resource)) BEGIN
        SPRINT write_resource_fn $~%eff_write_strategy_ref%~(resource)
        LPF ~%write_resource_fn%~ INT_VAR offset_shift STR_VAR resource = $~%patch_ref%~(resource) END
    END  
END
